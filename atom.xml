<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Humbert&#39;s Blog</title>
  
  <subtitle>欲变世界，先变自身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Humbertzhang.github.io/"/>
  <updated>2017-12-22T05:24:19.928Z</updated>
  <id>http://Humbertzhang.github.io/</id>
  
  <author>
    <name>Humbert Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAPP信息的表示与处理</title>
    <link href="http://Humbertzhang.github.io/2017/12/20/CSAPP%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E4%B8%8E%E5%A4%84%E7%90%86/"/>
    <id>http://Humbertzhang.github.io/2017/12/20/CSAPP信息的表示与处理/</id>
    <published>2017-12-20T06:15:47.000Z</published>
    <updated>2017-12-22T05:24:19.928Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="信息存储">信息存储</span></h1><h2><span id="字数据大小">字数据大小</span></h2><p>为了避免由于依赖“典型”大小和不同编译器设置带来的奇怪行为，IOSC99引入了一类数据类型，其数据大小在不同机器上是固定的，不随编译器与机器设置而改变。<br>如<code>int32_t</code>, <code>int64_t</code>, <code>uint32_t</code>, <code>uint64_t</code>等.</p><h2><span id="寻址和字节顺序">寻址和字节顺序</span></h2><p>假设一个程序中的对象由w位的数字来表示，且w是8的倍数(一个Byte是8个bit),那么就把它从最高位到最低位每8个划成一个字节。<br>在存储时，有的机器采用从最低有效位到最高有效位来存储(小端法)，有的则相反(大端法),这两种方法没有性能上的差别，只是方式不同。<br>Linux 与 Windows都使用小端法来储存数据。</p><h2><span id="二进制代码迁移性">二进制代码迁移性</span></h2><p>将一段程序经过编译后可以发现，在不同的机器上会得到不同的二进制代码，因为不同的操作系统对指令的编码规则是不一样的，因此二进制编码很难在不同的操作系统上兼容。</p><h2><span id="位级运算">位级运算</span></h2><p>与、或、非、异或被成为位(bit)级运算.<br>确定一个位级运算的结果的最好方法就是将其转化为二进制数，进行计算后再转化回来。<br>一个利用异或特性来实现inplace_swap的算法如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inplace_swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>&#123;</div><div class="line">    *y = *x ^ *y;</div><div class="line">    *x = *x ^ *y;   <span class="comment">//*x = *x ^ *x ^ *y = *y</span></div><div class="line">    *y = *x ^ *y;   <span class="comment">//*y = *y ^ *x ^ *y = *x</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>不过这种方式并没有性能上的优势。</p><h2><span id="逻辑运算">逻辑运算</span></h2><p>在逻辑运算中，所有非0的参数表示<code>True</code>, 0表示<code>False</code>.<br>并且，如果对一个参数求值，如<br><code>if(A || B)</code>, 如果只运算A就可以得到确定的结果，那么B就不会被运算。<br>因此我认为在写程序时要注意，最好不要将对程序结果有影响的式子放在逻辑运算中。</p><h2><span id="移位运算">移位运算</span></h2><p>左移：在右端补0<br>逻辑右移：在左端补0<br>算数右移：在左端补最高有效位的值。对有符号整数的运算很实用。<br>对绝大多数编译器，对有符号数进行算数右移，对无符号数进行逻辑右移。</p><h1><span id="整数表示">整数表示</span></h1><h2><span id="无符号数编码">无符号数编码</span></h2><p>可以用向量的思想来理解，每一位都是一个长度为2^i次方的向量，则无符号数字的值即为每一位向量的和。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic5.zhimg.com/50/v2-6333e9847024efb396a99e021235d369_r.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2><span id="有符号数的补码编码">有符号数的补码编码</span></h2><p>对于一个w位的向量 x = <code>[Xw-1, Xw-2, Xw-3 ... X0]</code>, 第一位为符号位，权重为<code>(-2^w-1)</code>，而这个值足够大到加上之后的所有正数还是负数。因此符号位为1时，值为负，为0时，值为正。</p><p>则最小数为：<code>-2^w-1</code>, 即为只有第一位为1的，其他都为0的情况。<br>最大数为:[01111…]情况，此时为<code>2^w-2 + 2^w-3 + ... + 2^0</code>, 即为<code>2^w-1-1</code><br>因此Min = -(Max+1), 且UnsignedMax = <code>2*MaX + 1</code> </p><h2><span id="有符号数和无符号数的之间的转换">有符号数和无符号数的之间的转换</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;信息存储&quot;&gt;信息存储&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;字数据大小&quot;&gt;字数据大小&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;为了避免由于依赖“典型”大小和不同编译器设置带来的奇怪行为，IOSC99引入了一类数据类型，其数据大小在不同机器上是固定的，不
      
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://Humbertzhang.github.io/tags/CSAPP/"/>
    
      <category term="CS基础" scheme="http://Humbertzhang.github.io/tags/CS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CPP STL介绍</title>
    <link href="http://Humbertzhang.github.io/2017/12/11/CPP%E5%AE%B9%E5%99%A8/"/>
    <id>http://Humbertzhang.github.io/2017/12/11/CPP容器/</id>
    <published>2017-12-11T06:53:36.000Z</published>
    <updated>2017-12-22T05:24:09.776Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="stl介绍">STL介绍</span></h2><p>STL(Standard Template Library), 标准模板库， 是一个具有工业强度的，高效的C++ 程序库。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++程序员们提供了一个可扩展的应用框架，高度体现了软件的可复用性。</p><p>在C++标准中，STL被组织为下面的13个头文件： <code>&lt;algorithm&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;functional&gt;</code>、<code>&lt;iterator&gt;</code>， <code>&lt;vector&gt;</code>， <code>&lt;list&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;memory&gt;</code>、<code>&lt;numeric&gt;</code>、<code>&lt;queue&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;stack&gt;</code>和<code>&lt;utility&gt;</code>。</p><h3><span id="stl-六大组件">STL 六大组件</span></h3><p>有容器、迭代器、算法、仿函数、迭代适配器、空间配置器。<br>容器通过空间配置器取得数据存储空间；算法利用迭代器向容器存取数据；仿函数协助算法完成不同的策略；适配器可以用来修改容器、迭代器或仿函数的接口；</p><p>主要需要我们关注的有：</p><ul><li>容器(Container): 是一种数据结构，如 list，vector，和deques ，以模板类的方法提供。</li><li>迭代器（Iterator）: 提供了访问容器中对象的方法。例如，可以使用一对迭代器指定list或vector中的一定范围的对象。</li><li>算法(Algorithm): 用来操作容器中的数据的模板函数。例如，STL用sort()来对一个vector中的数据进行排序，用find()来搜索一个list中的对象，函数本身与他们操作的数据的结构和类型无关，因此他们可以在从简单数组到高度复杂容器的任何数据结构上使用。 任何的一个STL算法，都需要获得由一对迭代器所标示的区间，用来表示操作范围。这一对迭代器所标示的区间都是前闭后开区间，例如<code>[first, last)</code>。也就是说实际上，整个区间是从first开始到last-1，迭代器last指的是最后一个元素的下一个位置。在STL中所有区间都是采用前闭后开，这样可以带来很多方便。</li></ul><h3><span id="常用容器与算法介绍">常用容器与算法介绍</span></h3><h4><span id="常用容器">常用容器</span></h4><p><code>&lt;vector&gt;</code><br>vector是一个能够存放任意类型的动态数组。当你不知道需要选取什么容器时就选它吧。vector在储存空间不足时会开辟一个原空间*2大小的空间，并将原数据拷贝到新的空间中。这个操作比较耗时，但是有办法可以弥补这个缺点，在下文会有。</p><p><code>&lt;list&gt;</code><br>双向循环链表。不可以随机存储，但是在任何地方插入与删除元素的时间都是常量.</p><p><code>&lt;queue&gt;</code><br>队列, 先进先出的数据结构.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)#/media/File:Data_Queue.svg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><code>&lt;deque&gt;</code><br>Deque是一个双向队列，既支持随机存取(像数组一样)，又支持两端的操作(在前后插入，在前后删除).</p><p><code>&lt;priority_queue&gt;</code><br>优先队列，即堆。每次出队的元素为优先级最高的那一个。</p><p><code>&lt;stack&gt;</code><br>栈， 后进先出的数据结构。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://en.wikipedia.org/wiki/Stack_\(abstract_data_type\)#/media/File:Lifo_stack.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><code>&lt;set&gt;</code><br>set, multiset, map, multimap底层都是使用<a href="https://sakurawood.github.io/2017/06/25/%E7%BA%A2%E9%BB%91%E6%A0%91/" target="_blank" rel="external">红黑树</a>实现的。<br>集合，每个值都是惟一的。</p><p><code>&lt;multiset&gt;</code><br>多集，值可以重复，可以记录每个元素出现了多少次。</p><p><code>&lt;map&gt;</code><br>键值对，键唯一，一个键对应一个值。</p><p><code>&lt;multimap&gt;</code><br>键值对，键位移，一个键可对应多个值。</p><h4><span id="常用算法">常用算法</span></h4><p>包含在<code>&lt;algorithm&gt;头文件中</code></p><p><code>min(), max()</code><br>返回最小值，最大值.</p><p><code>sort()</code><br>排序算法，将指定区间中的数据排序。<br>如<code>sort(v.begin(), v.end())</code>会将v这个vector中的元素从小到大排列。<br>还可以指定一个自己的比较规则作为参数传入sort函数。<br>sort(v.begin(), v.end(), compare)</p><p><code>reverse()</code><br>反转算法, 将指定区间中的数据反转。<br><code>reverse(s.begin(), s.end())</code> 会将s这个字符串反转。</p><p><code>swap()</code><br>交换两个对象。</p><p><code>fill()</code><br>对一个区间内的每个对象赋值。</p><p><code>unique()</code><br>移除一个区间内的重复的对象。</p><p><code>copy()</code><br>将一个区间内的数值拷贝到另一个区间中。</p><p><code>replace()</code><br>将一个区间内的某个对象替换为另一个对象。</p><h3><span id="示例程序">示例程序</span></h3><p><code>vector &amp; algorithm</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">coutvec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Vector 输出:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\r\n\r\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    v.reserve(<span class="number">20</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &gt; <span class="number">0</span>; i--)&#123;</div><div class="line">        v.push_back(i);</div><div class="line">    &#125;</div><div class="line">    coutvec(v); </div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"reverse(v.begin()+10, v.end()+20):"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    reverse(v.begin()+<span class="number">10</span>, v.begin()+<span class="number">20</span>);</div><div class="line">    coutvec(v);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(v.begin(), v.end()):"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    sort(v.begin(), v.end());</div><div class="line">    coutvec(v);</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"fill(v.begin(), v.begin+5, -1):"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    fill(v.begin(), v.begin()+<span class="number">5</span>, <span class="number">-1</span>);</div><div class="line">    coutvec(v);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy(v.begin(), v.begin()+5, v.begin()+6):"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    copy(v.begin(), v.begin()+<span class="number">5</span>, v.begin()+<span class="number">5</span>);</div><div class="line">    coutvec(v);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"replace(v.begin(), v.begin()+5, -1, 233):"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    replace(v.begin(), v.begin()+<span class="number">5</span>, <span class="number">-1</span>, <span class="number">233</span>);</div><div class="line">    coutvec(v);</div><div class="line">    </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unique(v.begin(), v.end()):"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">    it = unique(v.begin(), v.end());</div><div class="line">    v.resize(distance(v.begin(), it));</div><div class="line">    coutvec(v);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Queue &amp; Stack</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Queue:"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">        q.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="string">" "</span>;</div><div class="line">        q.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\r\n\r\n"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Stack:"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(!s.empty()) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="string">" "</span>;</div><div class="line">        s.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>Map &amp; Multimap</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Map:"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; m;</div><div class="line">    m[<span class="string">'a'</span>] = <span class="string">"apple"</span>;</div><div class="line">    m[<span class="string">'b'</span>] = <span class="string">"banana"</span>;</div><div class="line">    m[<span class="string">'c'</span>] = <span class="string">"cheery"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;::iterator it;</div><div class="line">    <span class="keyword">for</span>(it = m.begin(); it != m.end(); ++it) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">"=&gt;"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\r\n\r\n"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"MultiMap:"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">multimap</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; mm;</div><div class="line">    mm.insert(make_pair(<span class="string">'a'</span>, <span class="string">"apple"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'a'</span>, <span class="string">"avocado"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'b'</span>, <span class="string">"banana"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'b'</span>, <span class="string">"berry"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'b'</span>, <span class="string">"blueberry"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'c'</span>, <span class="string">"cherry"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'c'</span>, <span class="string">"core"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'c'</span>, <span class="string">"chestnut"</span>));</div><div class="line">    mm.insert(make_pair(<span class="string">'c'</span>, <span class="string">"cumquat"</span>));</div><div class="line">    <span class="built_in">multimap</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;::iterator itlow, ithigh;</div><div class="line">    itlow = mm.lower_bound(<span class="string">'a'</span>);</div><div class="line">    ithigh = mm.upper_bound(<span class="string">'c'</span>);</div><div class="line">    <span class="keyword">for</span>(it = itlow; it!=ithigh; ++it)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">"=&gt;"</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="stl的选取">STL的选取</span></h2><ul><li><p>是否需要在容器任意位置插入新元素？<br>如果需要，就选择序列容器(vector, string, deque, list)，避免关联容器(set, multiset, map, multimap)</p></li><li><p>你是否关心容器中的元素是如何排序的？<br>若不关心最好选择hash容器如hashset, hashmap等，因为效率会更高。<br><code>采用hash算法处理过的容器在查找元素时效率比普通容器更高</code></p></li><li><p>当容器发生元素插入与删除时，若需要尽力避免原来元素的腾挪，则应选择采用节点存储元素的容器(如list)，避免采用数组存储的元素如(vector)。</p></li><li><p>若十分关心容器的查找速度，则考虑的优先级为：hash容器， 排序的vector, 标准关联容器。</p></li></ul><p>… …</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.stack.imgur.com/kQnCS.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2><span id="使用技巧">使用技巧</span></h2><h3><span id="用empty而非size来检查容器是否为空">用empty()而非size()来检查容器是否为空</span></h3><p>对于所有容器，empty()都使用常数时间，而对于某些容器，size()需要耗费线性时间。</p><h3><span id="当在容器中存放指针时注意在销毁容器前先销毁指针">当在容器中存放指针时，注意在销毁容器前先销毁指针</span></h3><p>因为简单地delete容器并不能delete掉内部的那些指针。</p><h3><span id="删除">删除</span></h3><p><strong>如果你想删除某个值的元素，不同容器需要采用不同的方法。</strong></p><ul><li>如果采用连续内存容器，最好使用earse-remove方法.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v.erase(remove(v.begin(), v.end(), <span class="number">1</span>), c.end());</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ohr9krjig.bkt.clouddn.com/remove.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>对于list, 最有效的是直接使用list的remove成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c.remove(<span class="number">1</span>);</div></pre></td></tr></table></figure></li><li><p>对于关联容器，最有效的方法是使用erase</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c.erase(<span class="number">1</span>);</div></pre></td></tr></table></figure></li></ul><p><strong>如果你不只像删除某个值的元素，而是想删除下面这个函数返回false的函数。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">shouldremove</span><span class="params">(val x)</span></span></div></pre></td></tr></table></figure></p><ul><li><p>对于序列容器(vector, list, deque, string), 只需要将remove 换为remove_if()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//c为vector, list, deque, string</span></div><div class="line">c.erase(remove_if(c.begin(), c.end(), shouldremove), c.end());</div><div class="line"></div><div class="line"><span class="comment">//c为list</span></div><div class="line">c.remove_if(shouldremove);</div></pre></td></tr></table></figure></li><li><p>对于关联容器，最好采用这种方法</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Container&lt;<span class="keyword">int</span>&gt; c;</div><div class="line"><span class="comment">//遍历整个容器中的元素.</span></div><div class="line"><span class="keyword">for</span>(Container::iterator i = c.begin(); i != end(); <span class="comment">/*nothing*/</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(shouldremove(*i))&#123;</div><div class="line">        c.earse(i);</div><div class="line">    &#125;</div><div class="line">    i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="vector-减少不必要的重新分配">Vector 减少不必要的重新分配</span></h3><p>vector的扩张可以分为下面几个步骤:</p><ul><li>分配一块大小为当前容量2倍的空间。</li><li>把容器的所有元素从旧的内存拷贝到新的内存中。</li><li>析构掉旧内存中的对象。</li><li>释放旧的内存。<br>这个过程是十分耗时的。</li></ul><p>在想一下，如果你这样创建一个包含1到1000的vector<int>, 你可能会这样做:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</div><div class="line">    v.push_back(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></int></p><p>在这个过程中，最坏情况下会有10次内存重新分配。（1000 约等于 2的10次方）.</p><p>如何避免这种情况呢？<br>vector提供了一个reserve函数， 这个函数可以将容器的容量(capacity)强迫变为某个数值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">capacity:一个容器最大可以存放多少个元素，即size最大是多少。</div><div class="line">size:当前容器有多少元素。</div><div class="line">当vector在插入一个元素时，会比较size和capacity, 当两者一样大时，代表容量已经被用完，开始重新分配空间。</div></pre></td></tr></table></figure></p><p>如果我们在一开始就将vector的capacity设置为某个足够大的数值，就不会出现多次重新分配的情况，也就提升了效率。<br>如，上述程序这样写就不会出现重新分配的情况了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vector&lt;int&gt; v;</div><div class="line">v.reserve(1000);</div><div class="line">for(int i = 0; i &lt;= 1000; i++) &#123;</div><div class="line">    v.push_back(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注：这条策略同样适用于string.</p><h3><span id="当对效率敏感时应注意mapinsert-与-mapoperator">当对效率敏感时，应注意map.insert 与 map::operator[]</span></h3><p>当增加一对新元素时，使用map的insert函数。<br>当进行元素更新时，使用map的[]操作符。</p><p>因为当进行“增加”操作时，operator[]会有三 个函数调用：构造临时对象，撤销临时对象和对对象复制，而insert不会有；而对于更新操作，insert需要构造和析构对象，而operator[] 采用的对象引用，不会有这样的效率损耗.</p><h3><span id="排序">排序</span></h3><ul><li>若需对vector, string, deque, 或 array容器进行全排序，你可选择sort或stable_sort；</li><li>若只需对vector, string, deque, 或 array容器中取得top n的元素，部分排序partial_sort是首选.</li><li>若对于vector, string, deque, 或array容器，你需要找到第n个位置的元素或者你需要得到top n且不关系top n中的内部顺序，nth_element是最理想的；</li><li>若你需要从标准序列容器或者array中把满足某个条件或者不满足某个条件的元素分开，你最好使用partition或stable_partition；</li><li>若使用的list容器，你可以直接使用partition和stable_partition算法，你可以使用list::sort代替sort和stable_sort排序。若你需要得到partial_sort或nth_element的排序效果，你必须间接使用。正如上面介绍的有几种方式可以选择。</li></ul><h3><span id="容器的成员函数优先于算法">容器的成员函数优先于算法</span></h3><p>若一个容器的成员函数与一个算法功能一致，则优先选择成员函数。因为成员函数是专门为这个容器编写的，因此与容器结合地更紧密，效率一般会更高。</p><hr><p><strong>推荐查询函数用法的网站 -&gt; <a href="http://www.cplusplus.com/reference/" target="_blank" rel="external">Cplusplus reference</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;stl介绍&quot;&gt;STL介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;STL(Standard Template Library), 标准模板库， 是一个具有工业强度的，高效的C++ 程序库。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++
      
    
    </summary>
    
    
      <category term="C++" scheme="http://Humbertzhang.github.io/tags/C/"/>
    
      <category term="STL" scheme="http://Humbertzhang.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP:系统级I/O</title>
    <link href="http://Humbertzhang.github.io/2017/10/02/CSAPP%E7%AC%AC%E5%8D%81%E7%AB%A0%E7%AC%94%E8%AE%B0-%E7%B3%BB%E7%BB%9F%E7%BA%A7I-O/"/>
    <id>http://Humbertzhang.github.io/2017/10/02/CSAPP第十章笔记-系统级I-O/</id>
    <published>2017-10-02T14:41:25.000Z</published>
    <updated>2017-12-22T05:24:37.664Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="unix-io">Unix I/O</span></h2><p>所有I/O设备都被模型化为文件,　因此所有输入输出都被当作文件读写，　也因此所有输入输出都可以用一致的方式(Unix I/O)来执行:</p><ol><li>打开文件<br>通过<strong>内核</strong>来打开一个文件，并返回相应的文件描述符．<strong>内核</strong>记录文件的所有信息打开文件的应用程序只需要记住描述符.<br>每个进程一开始就有三个描述符:0(标准输入),1(标准输出),2(标准错误),因此其他描述符从3开始．</li><li>改变当前文件的字节偏移量<br>将文件偏移量改为应有的偏移量.</li><li>读写文件<br>读文件:从文件复制字节到内存，大于文件大小时返回EOF.<br>写文件:从内存复制字节到文件，然后更新字节偏移量.</li><li>关闭文件<br><strong>内核</strong>关闭文件，释放打开文件时用的数据结构，使描述符重新可用.<br>当进程中止时，内核都会关闭其打开的所有文件．</li></ol><h2><span id="文件">文件</span></h2><ul><li>普通文件<br>包括文本文件(内含ASCII 或 Unicode)与二进制文件．</li><li>目录<br>目录是包含一组链接的文件，每个链接都将一个文件名映射到一个文件（可为另一个目录）</li><li>套接字<br>用来与另一个<strong>进程</strong>进行<strong>跨网络</strong>通信的文件</li></ul><h2><span id="打开和关闭文件">打开和关闭文件</span></h2><p>打开文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">char</span> *filename, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span></div></pre></td></tr></table></figure></p><p>flags参数：<br>可以使用<code>|</code>符号来一起使用多个参数．</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">O_RDONLY</td><td style="text-align:left">只读</td></tr><tr><td style="text-align:left">O_WRONLY</td><td style="text-align:left">只写</td></tr><tr><td style="text-align:left">O_RDWR</td><td style="text-align:left">读写</td></tr><tr><td style="text-align:left">O_CREAT</td><td style="text-align:left">若不存在创建一个截断的空文件</td></tr><tr><td style="text-align:left">O_TRUNC</td><td style="text-align:left">若文件已存在就截断</td></tr><tr><td style="text-align:left">O_APPEND</td><td style="text-align:left">每次写之前将文件位置到文件结尾</td></tr></tbody></table><p><code>文件截断 : 有时候我们需要在文件尾端处截取一些数据以缩短文件。</code></p><p>mode参数：若为创建一个新文件(O_CREAT), 则可以指定访问权限.</p><p>关闭文件使用描述符即可关闭.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</div></pre></td></tr></table></figure></p><h2><span id="读写文件">读写文件</span></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> n);</div><div class="line">将文件中n个字符读到buf中</div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> n);</div><div class="line">将buf中n个字符写至fd所指文件中.</div><div class="line"><span class="keyword">ssize_t</span> 为有符号大小</div><div class="line"><span class="keyword">size_t</span>　为无符号大小</div></pre></td></tr></table></figure><h2><span id="robust-io健壮的io包">Robust I/O:健壮的IO包</span></h2><h3><span id="无缓冲的输入输出">无缓冲的输入输出</span></h3><p>直接在文件与内存之间传输数据<br>在将二进制数据读写至网络和从网络读写二进制数据时很有用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> rio_readn(<span class="keyword">int</span> fd, <span class="keyword">void</span> *usrbuf, <span class="keyword">size_t</span> n);</div><div class="line"><span class="keyword">ssize_t</span> rio_writen(<span class="keyword">int</span> fd, <span class="keyword">void</span> *usrbuf, <span class="keyword">size_t</span> n);</div></pre></td></tr></table></figure></p><h3><span id="有缓冲的输入输出">有缓冲的输入输出</span></h3><p>在rio_t 结构体中的 rio_buf中存作为缓冲，之后再从中读取出来.</p><p>rio_t 结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RIO_BUFSIZE 8192</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">int</span> rio_fd;                     <span class="comment">//与缓冲区绑定的描述符</span></div><div class="line">    <span class="keyword">int</span> rio_cnt;                    <span class="comment">//缓冲区还未读的字节数</span></div><div class="line">    <span class="keyword">char</span> * rio_bufptr;              <span class="comment">//缓冲区中下一个要被读的字节的指针</span></div><div class="line">    <span class="keyword">char</span> rio_buf[RIO_BUFSIZE];      <span class="comment">//缓冲区</span></div><div class="line">&#125;<span class="keyword">rio_t</span>;</div></pre></td></tr></table></figure></p><p>rio_readinitb函数 : 绑定fd与rio_t 结构体.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rio_readinitb</span><span class="params">(<span class="keyword">rio_t</span> *rp, <span class="keyword">int</span> fd)</span></span></div><div class="line">&#123;</div><div class="line">    rp -&gt; rio_fd = fd;</div><div class="line">    rp -&gt; rio_cnt = <span class="number">0</span>;  <span class="comment">//还未读的字节初始化为0</span></div><div class="line">    rp -&gt; rio_bufptr = rp -&gt; rio_buf;   <span class="comment">//将读取的指针指向缓冲区</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>rio_read函数<br>先从文件读到rio_t结构体缓存区，再memcpy到用户内存.<br>因为这个函数定义的输入输出与Linux系统中的read函数一致，所以用它来替换上文无缓冲输入输出中的read函数即可得到他的有缓冲版本-&gt;rio_readnb.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">rio_read</span><span class="params">(<span class="keyword">rio_t</span> * rp, <span class="keyword">char</span> *usrbuf, <span class="keyword">size_t</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cnt;</div><div class="line">    <span class="keyword">while</span>(rp-&gt;rio_cnt &lt;= <span class="number">0</span>)&#123;    <span class="comment">//若没有读到数据，则继续</span></div><div class="line">        rp-&gt;rio_cnt = read(rp-&gt;rio_fd, rp-&gt;rio_buf, <span class="keyword">sizeof</span>(rp-&gt;rio_buf));</div><div class="line">        <span class="comment">//将fd所指的文件传送sizeof(rp-&gt;rio_buf)个字符到rp-&gt;rio_buf所指的空间中.若成功则返回字符数给rio_cnt, 出错返回-1，无可读数据返回0．</span></div><div class="line">        <span class="keyword">if</span>(rp -&gt; rio_cnt &lt; <span class="number">0</span>)&#123;      <span class="comment">//对返回为-1作处理</span></div><div class="line">            <span class="keyword">if</span>(errno != EINTR)</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rp-&gt;rio_cnt == <span class="number">0</span>)   <span class="comment">//对未读做处理</span></div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            rp-&gt;rio_bufptr = rp -&gt; rio_buf; <span class="comment">//一切正常则将读数据的指针指向保存数据的内存</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*从rio_t结构体中的缓存中复制 min(n, rp-&gt;rio_cnt) 个字节到用户内存中*/</span></div><div class="line">    cnt = n;</div><div class="line">    <span class="keyword">if</span>(rp -&gt; rio_cnt &lt; n)</div><div class="line">        cnt = rp -&gt;rio_cnt;</div><div class="line">    <span class="built_in">memcpy</span>(usrbuf, rp-&gt;rio_bufptr, cnt);</div><div class="line">    rp -&gt; rio_bufptr += cnt;    <span class="comment">//移动指针</span></div><div class="line">    rp -&gt; rio_cnt -= cnt;       <span class="comment">//减少应读的字节数</span></div><div class="line">    <span class="keyword">return</span> cnt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>rio_readlineb函数 : 读取一行<br>因为rio_readline跟rio_read共用的一个rp结构体<br>因此只要在第一次if(rc = rio_read(rp,&amp;c,1) == 1)的时候<br>在rp结构体中的rp-&gt;rio_cnt就已经不是0了，因此上一个函数就不需要做while(rp-&gt;rio_cnt&lt;=0)<br>中所做的事情了，而是直接memcpy()来从rp-&gt;rio_bufptr中移动一个字符到usrbuf<br>因此避免了每个字节都陷入内核<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> rio_readlineb(<span class="keyword">rio_t</span> *rp, <span class="keyword">void</span> *usrbuf, <span class="keyword">size_t</span> maxlen)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n, rc;</div><div class="line">    <span class="keyword">char</span> c, *bufp = usrbuf;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(n = <span class="number">1</span>; n &lt;maxlen; n++)&#123;</div><div class="line">        <span class="keyword">if</span>((rc = rio_read(rp, &amp;c, <span class="number">1</span>)) == <span class="number">1</span>)&#123;<span class="comment">//</span></div><div class="line">            *bufp++ = c;</div><div class="line">            <span class="keyword">if</span>(c == <span class="string">'\n'</span>)&#123;      <span class="comment">//是换行符号则字符数+1并停止</span></div><div class="line">                n++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rc == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    *bufp = <span class="number">0</span>;  <span class="comment">//???</span></div><div class="line">    <span class="keyword">return</span> n<span class="number">-1</span>; <span class="comment">//因为n从1开始，故n-1才为字节数目.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2><span id="读取文件元数据">读取文件元数据</span></h2><p>元数据指用来<strong>表示数据的数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">struct</span> stat *buf)</span></span>;<span class="comment">//以文件名作为输入</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">struct</span> stat *buf)</span></span>;             <span class="comment">//以文件描述符作为输入</span></div><div class="line">他们会将文件转换为如下结构体,这些也就是所谓文件元数据</div><div class="line"><span class="keyword">struct</span> stat &#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    <span class="keyword">ino_t</span>       st_ino;     <span class="comment">/*inode*/</span></div><div class="line">    <span class="keyword">mode_t</span>      st_mode;    <span class="comment">/*文件类型与文件访问许可位*/</span></div><div class="line">    <span class="keyword">nlink_t</span>     st_nlink;   <span class="comment">/*hard links的number*/</span></div><div class="line">    <span class="keyword">uid_t</span>       st_uid;     <span class="comment">/*User ID of owner*/</span></div><div class="line">    <span class="keyword">gid_t</span>       st_gid;     <span class="comment">/*Group ID of owner*/</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">off_t</span>       st_size;    <span class="comment">/*Total Size in bytes*/</span></div><div class="line">    ...</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>inode表示文件位置, 更多关于inode可以看<a href="https://en.wikipedia.org/wiki/Inode" target="_blank" rel="external">inode-Wikipedia</a></p><p>st_mode可以用以下宏谓词来确定文件类型:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">S_ISREG(m) -&gt;　m是一个普通文件吗?</div><div class="line">S_ISDIR(m) -&gt;  m是一个目录文件吗?</div><div class="line">S_ISSOCK(M) -&gt; m是一个套接字吗?</div></pre></td></tr></table></figure></p><h2><span id="读取目录内容">读取目录内容</span></h2><p>opendir 函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function">DIR *<span class="title">opendir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line">成功返回指向目录流的指针，出错返回<span class="literal">NULL</span></div><div class="line">流　是对条目有序序列的一个抽象，这里指目录项的列表</div></pre></td></tr></table></figure></p><p>readdir 函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">struct</span> dirent *<span class="title">readdir</span><span class="params">(DIR *dirp)</span></span>;</div><div class="line">若成功，返回返回下一个目录项的指针</div><div class="line">若在该目录下没有更多的目录项或出错了，则返回<span class="literal">NULL</span>，并修改errno的值</div><div class="line"></div><div class="line">每个目录项的结构如下:</div><div class="line"><span class="keyword">struct</span> dirent &#123;</div><div class="line">    <span class="keyword">ino_t</span>   d_ino;      <span class="comment">/*inode number,文件位置*/</span></div><div class="line">    <span class="keyword">char</span>    d_name[<span class="number">256</span>];   <span class="comment">/*filename*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>closedir函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">closedir</span><span class="params">(DIR *dirp)</span></span>;</div></pre></td></tr></table></figure></p><p>关闭目录流并释放资源.</p><p>大体来说，读取目录内容的流程为:<br>1,使用opendir来得到一个指向目录流的指针.<br>2,使用readdir来一个个读取目录中的所有项目直到返回NULL.<br>3,再用closedir来关闭目录流.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    DIR *streamp;</div><div class="line">    <span class="keyword">struct</span> dirent *dep;</div><div class="line">    </div><div class="line">    streamp = Opendir(argv[<span class="number">1</span>]);</div><div class="line">    errno = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>((dep = readdir(streamp)) != <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Found file: %s\n"</span>, dep-&gt;d_name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(errno != <span class="number">0</span>)</div><div class="line">        unix_error(<span class="string">"readdir error"</span>);</div><div class="line">    Closedir(streamp);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2><span id="共享文件">共享文件</span></h2><h3><span id="内核如何表示打开的文件">内核如何表示打开的文件</span></h3><p>内核用三个相关的数据结构来表示打开的文件</p><ul><li>描述符表(descriptor table)<br>每个进程都有自己的描述符表,表中每个表项由进程打开的文件描述符来索引的.每个打开的描述符<strong>表项</strong>指向文件表中的一个表项</li><li>文件表(file table)<br>所有进程共用一个文件表,它表示所有打开的文件的集合.它包括的列有文件位置，引用计数,以及一个指向v-node表中对应表项的指针.内核会在一个表项的引用计数为0时删除一个表项.</li><li>v-node 表<br>同为所有进程共用一张表，每个表项包括st_mode, st_size等stat结构中的大多数信息.<br>不同于inode, inode只是表示文件位置.</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/21/img/fs-tty-fd.png" alt="三个表之间的图示" title="">                </div>                <div class="image-caption">三个表之间的图示</div>            </figure><p>注1:tty可以理解为一个交互环境，如终端.<br>注2:</p><blockquote><p>On Linux, the set of file descriptors open in a process can be<br>accessed under the path /proc/PID/fd/, where PID is the process<br>identifier.</p></blockquote><h3><span id="父子进程如何共享打开文件列表">父子进程如何共享打开文件列表</span></h3><p>调用fork()前只有父进程表指向文件表的指针,调用fork后子进程增加了对于文件表中相应文件的引用次数.而从file table到vnode table的引用是不受影响的.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.programering.com/images/remote/ZnJvbT1jbmJsb2dzJnVybD13WnVCbkx6WW1ZeWdEWjRBRE94QXpNbUJUTTRnVE56UWpNMk1qTXpZMk16UXpNemdUTHlFRE54QWpNM0F6THhBRE54QWpNdlVqTTRnak4wOHladnhtWXYwMmJqNXladnhtWTBsbWJqNXljbGRXWXRsMkx2b0RjMFJIYQ.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2><span id="io重定向">I/O重定向</span></h2><p>在shell中，可用 <code>&gt;</code> 符号来重定向输出到文件.<br>另一种方式是使用dup2函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span></span>;</div><div class="line"></div><div class="line">成功返回非负描述符, 出错返回<span class="number">-1.</span></div><div class="line"></div><div class="line">dup2()函数复制该进程的描述符表中的oldfd的表项到newfd表项.覆盖newfd之前的内容.</div><div class="line">如果newfd已经打开了,dup2()会在复制oldfd之前关闭newfd.</div></pre></td></tr></table></figure></p><p>.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.programering.com/images/remote/ZnJvbT1jc2RuJnVybD1RM2NoVkVhMFYzYlQ5U2UwbG1kaEozWnZBek52VW1kczkyY3psR1p2MFRQQjEwUUd0V1VDcEVNSjlDYnNsbVp2QURNMDhTWjZsMmMwNTJibTlDVnl3VU5NWlRZMThDZHU5bVp2MFRQQjlFTnJSbFQwRWthTmhYUVVSbWRSaGxXMVZUYWl0bVR6a1ZkakpqWXpwa01NWjNiRU5HTVNoVVl2UUhlbFIzTHk4eWF5RldieVZHZGhkM1B5WURNNFVqTXhBVE15RWpNeE1UTXdJekwwVm1idTRHWnpObUxuOUdiaTV5WnRsMkx2b0RjMFJIYQ.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>如图,dup(4,1)会将标准输出(fd = 1)重定向到(fd = 4),即指向fileB.<br>之后fileA将会被关闭, file table到v-node table的引用会被删除, v-node table中对应项也会被释放.</p><h2><span id="标准iostdioh">标准I/O(＜stdio.h＞)</span></h2><p>包括:</p><ul><li>打开关闭文件的函数:fopen(), fclose()</li><li>读写字节的函数:fread(), fwrite()</li><li>读写字符串:fgets(), fputs()</li><li>复杂格式化I/O:scanf(), printf()<br>标准I/O库将一个打开的文件模型化一个<strong>流</strong>,即一个指向FILE类型的结构的指针.<br>每个C程序在一开始就有三个打开的流:<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">extern</span> FILE *<span class="built_in">stdin</span>;     文件描述符为<span class="number">0</span></div><div class="line"><span class="keyword">extern</span> FILE *<span class="built_in">stdout</span>;    文件描述符为<span class="number">1</span></div><div class="line"><span class="keyword">extern</span> FILE *<span class="built_in">stderr</span>;    文件描述符为<span class="number">2</span></div><div class="line">因为Linux中一切皆文件，所以一开始也打开<span class="built_in">stdin</span>, <span class="built_in">stdout</span>, <span class="built_in">stderr</span>三个文件.</div></pre></td></tr></table></figure></li></ul><p>FILE类型的流是对文件描述符和流缓冲区<strong>(</strong>使开销较大的Linux I/O函数调用次数尽可能小<strong>)</strong>的抽象．</p><h2><span id="使用io函数的建议与限制">使用I/O函数的建议与限制</span></h2><p>本章讨论的所有I/O函数如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic2.zhimg.com/50/v2-61b934c2a0efe443dcd91370b8ab48e1_r.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>可以看出标准I/O函数与RIO函数都是基于Unix I/O函数来实现的.</p><h3><span id="使用io函数的基本指导与建议">使用I/O函数的基本指导与建议:</span></h3><ul><li>只要有可能就使用标准I/O．<br>对于磁盘与终端设备I/O来说, 标准I/O是首选.</li><li>不要使用scanf或rio_readlineb来读取二进制文件.<br>因为二进制文件中可能有0xa字节，而他们在读取文本文件的函数中代表换行，但是在读取二进制文件过程中就会导致错误.</li><li>对网络套接字的I/O使用rio函数</li></ul><h3><span id="在标准io流中又存在着一些限制">在标准I/O流中又存在着一些限制:</span></h3><ul><li>限制一:跟在输出函数后的输入函数．如果没有清空缓存区的函数(fflush)或重置当前文件位置的函数(fseek, fsetpos, rewind)调用，不能这样.</li><li><p>限制二:跟在输入函数后的输出函数:若之间没有fseek, fsetpos, rewind的调用,且输入函数又不是自然结束，则不可在其后跟输出函数.</p><p>而因为lseek函数在套接字中为非法的，因此不建议在网络套接字的读取中使用标准I/O函数，而是建议使用RIO函数.可用sprintf在内存中格式化一个字符串, 再用rio_writen写.或是用rio_readlineb读取一个文本行，再用sscanf从文本行提取不同字符串.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;unix-io&quot;&gt;Unix I/O&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;所有I/O设备都被模型化为文件,　因此所有输入输出都被当作文件读写，　也因此所有输入输出都可以用一致的方式(Unix I/O)来执行:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开文件&lt;br&gt;通过&lt;st
      
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://Humbertzhang.github.io/tags/CSAPP/"/>
    
      <category term="CS基础" scheme="http://Humbertzhang.github.io/tags/CS%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Linux" scheme="http://Humbertzhang.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>测试驱动开发流程</title>
    <link href="http://Humbertzhang.github.io/2017/08/11/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B-md/"/>
    <id>http://Humbertzhang.github.io/2017/08/11/测试驱动开发流程-md/</id>
    <published>2017-08-11T03:36:08.000Z</published>
    <updated>2017-08-11T03:53:12.276Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="测试驱动开发">测试驱动开发</span></h2><h3><span id="什么是测试驱动开发tdd">什么是测试驱动开发（TDD）</span></h3><p>测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个功能后，首先思考如何对这个功能进行测试，并完成测试代码的编写，然后编写相关的代码满足这些测试用例。然后循环进行添加其他功能，直到完全部功能的开发。</p><h3><span id="测试驱动开发的好处">测试驱动开发的好处</span></h3><ul><li>测试驱动开发可以使我们仔细思考需求，减少后期的修改</li><li>在测试驱动开发过程中，我们会对相应的功能进行分解与设计，可以提高代码的内聚性与复用性</li><li>测试驱动开发可以使我们快速找出Bug,并提高我们的修改代码的自信</li></ul><h3><span id="测试驱动开发过程">测试驱动开发过程</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1） 明确当前要完成的功能。可以记录成一个 TODO 列表。</div><div class="line">2） 快速完成针对此功能的测试用例编写。</div><div class="line">3） 测试代码编译不通过。 </div><div class="line">4） 编写对应的功能代码。 </div><div class="line">5） 测试通过。 </div><div class="line">6） 对代码进行重构，并保证测试通过。 </div><div class="line">7） 循环完成所有功能的开发。</div></pre></td></tr></table></figure><hr><h2><span id="我们的开发流程">我们的开发流程</span></h2><h3><span id="1确定api文档">1，确定API文档</span></h3><p>首先，后端应根据需求进行数据库的设计，API功能的确定以及API文档的编写。<br>编写完API文档之后，应与一起开发的前端人员一起确定API文档中的各个API，反复修改直到达成约定。</p><h3><span id="2编写项目骨架">2，编写项目骨架</span></h3><p>根据之前设计的数据库等，编写相应的models.py以及其他必不可少的组成部分，具体可见下面的实战。</p><h3><span id="3测试驱动开发api">3，测试驱动开发API</span></h3><p>根据测试开发的过程，编写测试以及API</p><hr><h2><span id="实战">实战</span></h2><p>在这里，我们会编写一个带有用户系统的，前后端分离的简单Demo.他的功能是当你在注册登录后，使用GET方法访问相应API时，他会返回用户名字．使用PUT方法访问相应API时，可以修改名字．<br>你可以在<a href="https://github.com/Humbertzhang/TDDWorkFlow" target="_blank" rel="external">我的github仓库</a>中查看代码</p><h3><span id="1确定api文档">1，确定API文档</span></h3><p><code>注册</code></p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">Header</th><th style="text-align:left">Method</th></tr></thead><tbody><tr><td style="text-align:left">/api/v1.0/signup/</td><td style="text-align:left">无</td><td style="text-align:left">POST</td></tr></tbody></table><p><strong>POST data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;username&quot;: string,     //用户名</div><div class="line">    &quot;password&quot;: string,     //用户密码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Return data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;created&quot;: int         //用户ID</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>登录</code></p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">Header</th><th style="text-align:left">Method</th></tr></thead><tbody><tr><td style="text-align:left">/api/v1.0/signin/</td><td style="text-align:left">无</td><td style="text-align:left">POST</td></tr></tbody></table><p><strong>POST data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;username&quot;: string,     //用户名</div><div class="line">    &quot;password&quot;: string,     //用户密码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Return data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;uid&quot;:Int</div><div class="line">    &quot;token&quot;:String</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>获取用户名字</code></p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">Header</th><th style="text-align:left">Method</th></tr></thead><tbody><tr><td style="text-align:left">/api/v1.0/<code>&lt;int:id&gt;</code>/</td><td style="text-align:left">Authorization:Basic Base64Token</td><td style="text-align:left">GET</td></tr></tbody></table><p><strong>Return data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;username&quot;:String</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>修改用户名字</code></p><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">Header</th><th style="text-align:left">Method</th></tr></thead><tbody><tr><td style="text-align:left">/api/v1.0/<code>&lt;int:id&gt;</code>/</td><td style="text-align:left">Authorization:Basic Base64Token</td><td style="text-align:left">PUT</td></tr></tbody></table><p><strong>PUT data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;username&quot;:String</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Return data(json):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;message&quot;:&quot;modiry&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3><span id="2编写项目骨架">2，编写项目骨架</span></h3><p>Demo的文件结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── APIdoc.md</div><div class="line">├── Demo</div><div class="line">│   ├── app</div><div class="line">│   │   ├── api</div><div class="line">│   │   │   └── __init__.py</div><div class="line">│   │   ├── __init__.py</div><div class="line">│   │   └── models.py</div><div class="line">│   ├── config.py</div><div class="line">│   ├── manage.py</div><div class="line">│   └── requirements.txt</div><div class="line">└── README.md</div></pre></td></tr></table></figure></p><p>根据仓库中的代码来完善好config.py manage.py requirements.txt model.py 以及各个<code>__init__.py</code><br>如果你是克隆的仓库，可以使用<code>git checkout a1ff2d4</code> 来切换到搭建完骨架之后</p><h3><span id="3测试驱动开发api">3，测试驱动开发API</span></h3><p>在manage.py 所在的文件夹下，创建<code>test</code>文件夹，在<code>test</code>文件夹下创建<code>test.py</code>．</p><p>根据仓库中的代码编写测试，并运行，得到预料中的False.</p><p>之后，根据在测试中所编写的测试用例完善api文件夹中的各个API,每次写完某个API之后就应运行一下测试(<code>python manage.py test</code>),判断是否符合预期．<br>若要修改功能，也应先修改测试用例，再修改API.</p><p>你分别可以使用 <code>git checkout &lt;HEAD_ID&gt;</code> 来跳到相应的版本</p><table><thead><tr><th style="text-align:left">History</th><th style="text-align:left">HEAD ID</th></tr></thead><tbody><tr><td style="text-align:left">Test.py编写完成</td><td style="text-align:left">cebecb4</td></tr><tr><td style="text-align:left">Signup完成</td><td style="text-align:left">f7c88dc</td></tr><tr><td style="text-align:left">Signin完成</td><td style="text-align:left">0740636</td></tr><tr><td style="text-align:left">Getname API完成</td><td style="text-align:left">a75f76e</td></tr><tr><td style="text-align:left">ChangeName API完成</td><td style="text-align:left">e3102c1</td></tr></tbody></table><p>测试前不要忘记初始化数据库！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py db init</div><div class="line">python manage.py db migrate</div><div class="line">python manage.py db upgrade</div></pre></td></tr></table></figure></p><p>Refrence : <a href="https://www.ibm.com/developerworks/cn/linux/l-tdd/" target="_blank" rel="external">浅谈测试驱动开发（TDD）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;测试驱动开发&quot;&gt;测试驱动开发&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span id=&quot;什么是测试驱动开发tdd&quot;&gt;什么是测试驱动开发（TDD）&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;测试驱动开发的基本思想就是在开发功能代码之前，先编写测试代码。也就是说在明确要开发某个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Mysql_In_Docker为docker部署的Flask提供数据库支持</title>
    <link href="http://Humbertzhang.github.io/2017/07/31/docker-compose%E9%83%A8%E7%BD%B2MysqlInDocker+Flask/"/>
    <id>http://Humbertzhang.github.io/2017/07/31/docker-compose部署MysqlInDocker+Flask/</id>
    <published>2017-07-31T03:24:50.000Z</published>
    <updated>2017-12-21T08:49:38.490Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#目的使用docker部署的mysql来为flask提供数据支持">目的：使用Docker部署的mysql来为flask提供数据支持</a></li><li><a href="#step1">Step1</a><pre><code>- [拉取docker mysql镜像](#拉取docker-mysql镜像)</code></pre></li><li><a href="#step2">Step2</a><pre><code>- [获取docker-mysql的内网地址](#获取docker-mysql的内网地址)</code></pre></li><li><a href="#step3">Step3</a><pre><code>- [修改docker-compose.yml](#修改docker-composeyml)</code></pre></li><li><a href="#step4">Step4</a><pre><code>- [部署flask与数据库初始化](#部署flask与数据库初始化)</code></pre></li></ul><!-- tocstop --><h2><span id="目的使用docker部署的mysql来为flask提供数据支持">目的：使用Docker部署的mysql来为flask提供数据支持</span></h2><hr><h2><span id="step1">Step1</span></h2><h5><span id="拉取docker-mysql镜像">拉取docker mysql镜像</span></h5><pre><code>docker run --detach --name=test-mysql --env=&quot;MYSQL_ROOT_PASSWORD=mypassword&quot; mysql</code></pre><hr><h2><span id="step2">Step2</span></h2><h5><span id="获取docker-mysql的内网地址">获取docker-mysql的内网地址　</span></h5><pre><code>docker inspect test-mysql | grep IPAddress</code></pre><p>我得到的IPAddress为<code>172.17.0.20</code></p><p>使用本地的mysql在其中加入新数据库,其中-h 后对应的即为上面的IPAdress ,-P对应mysql的默认端口3306.</p><pre><code>mysql -uroot -pmypassword -h 172.17.0.20 -P 3306</code></pre><p>在数据库中输入</p><pre><code>CREATE DATABASE TEST</code></pre><p>加完后，添加config.py中相应的.env文件，<br>    MYSQL_URI=mysql://root:mypassword@mysql:3306/TEST</p><hr><h2><span id="step3">Step3</span></h2><h5><span id="修改docker-composeyml">修改docker-compose.yml</span></h5><p>使用docker ps得到test-mysql的容器ID,根据容器的ID在docker-compose.yml中flask对应的容器中添加</p><pre><code>external_links:         - CONTAINER_ID:mysql</code></pre><hr><h2><span id="step4">Step4</span></h2><h5><span id="部署flask与数据库初始化">部署flask与数据库初始化</span></h5><p>之后使用</p><pre><code>docker-compose builddocker-compose up &amp;</code></pre><p>来将项目部署起来</p><p>之后需要初始化数据库（仅初次部署需要）</p><p>在服务器上运行(注意需在manage.py中添加对应命令)：</p><pre><code>$ docker exec &lt;container id&gt; python manage.py db init$ docker exec &lt;container id&gt; python manage.py db migrate$ docker exec &lt;container id&gt; python manage.py db upgrade$ docker exec &lt;container id&gt; python manage.py insert_roles$ docker exec &lt;container id&gt; python manage.py add_test_admin$ docker exec &lt;container id&gt; python manage.py test</code></pre><p>迁移数据库后（如果后续部署中修改了数据模型结构）<br>在服务器上运行：</p><p>   $ docker exec <container id=""> python manage.py db migrate<br>   $ docker exec <container id=""> python manage.py db upgrade</container></container></p><p>此时该项目就可以正常与docker中的mysql相连了</p><p>Refrence:</p><ul><li><a href="https://severalnines.com/blog/mysql-docker-containers-understanding-basics" target="_blank" rel="external">MySQL Docker Containers: Understanding the basics</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#目的使用docker部署的mysql来为flask提供数据支持&quot;&gt;目的：使用Docker部署的mysql来为flask提供数据支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#step1&quot;&gt;Step1&lt;/a&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://Humbertzhang.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>半自动FlaskAPI测试－Judgement</title>
    <link href="http://Humbertzhang.github.io/2017/07/14/%E5%8D%8A%E8%87%AA%E5%8A%A8FlaskAPI%E6%B5%8B%E8%AF%95%EF%BC%8DJudgement/"/>
    <id>http://Humbertzhang.github.io/2017/07/14/半自动FlaskAPI测试－Judgement/</id>
    <published>2017-07-14T05:16:34.000Z</published>
    <updated>2017-07-14T05:58:58.899Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="用途">用途</span></h3><p>最近在写桂声测试的时候，发现对于Flask api的测试是有很多套路的，可以写一个东西来自动地将那些套路的东西填上，然后再由我们自己对那些非套路的东西人工修改，这样以来写测试的效率就会提高很多．</p><hr><h3><span id="使用方法">使用方法</span></h3><p>现在还没上传到pip那里（貌似pip在重构？怎么都传不上去），所以暂时只能clone下来judgement的仓库使用:</p><pre><code>git clone https://github.com/Humbertzhang/Judgement.git</code></pre><p>克隆下来后仓库的结构是这样的：</p><pre><code>.├── judgement.py├── README.md└── test_apis    ├── forgive.py    ├── getinfo.py    ├── __init__.py    ├── signin.py    ├── signup.py    └── uploadtime.py</code></pre><p>其中<code>test_apis</code>文件夹是用来测试使用的，例如下图：<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cuntuku.com/image/44PCc" alt="judge_demo.gif](https://storage2.cuntuku.com/2017/07/14/judge_demo.gif)" title="">                </div>                <div class="image-caption">judge_demo.gif](https://storage2.cuntuku.com/2017/07/14/judge_demo.gif)</div>            </figure><br>在实际使用中输入的API Floder Address为我们的api存放的文件夹．接着judgement便会自动地在其所在的文件夹为我们生成API的测试，存放在自动生成的testByJudgement文件夹里．<br>judgement使用就是这样,肯定还有很多不足和可以改进的地方，欢迎 issue 和 pr.</p><hr><h3><span id="实现方法">实现方法</span></h3><p>主要便是调用了文件读写的api．<br>读取api文件夹中每个文件，然后对每一行进行检查，如果该行中有@api.route()字样便识别为一个api的开始，然后跳过接下来带有＂＠＂，＂＃＂的行和空行，读取其api名字与方法，根据不同的方法来file.writelines不同的内容．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;用途&quot;&gt;用途&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;最近在写桂声测试的时候，发现对于Flask api的测试是有很多套路的，可以写一个东西来自动地将那些套路的东西填上，然后再由我们自己对那些非套路的东西人工修改，这样以来写测试的效率就会提高很多．&lt;/p&gt;
&lt;hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟登录下获取Cookie</title>
    <link href="http://Humbertzhang.github.io/2017/05/21/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E4%B8%8B%E8%8E%B7%E5%8F%96Cookie/"/>
    <id>http://Humbertzhang.github.io/2017/05/21/模拟登录下获取Cookie/</id>
    <published>2017-05-20T16:51:10.000Z</published>
    <updated>2017-05-20T17:24:35.502Z</updated>
    
    <content type="html"><![CDATA[<p>获取信息门户的Cookie时，我们需要动态的获取，以得到正确的Cookie.<br>因为原来华师匣子课表等有数据库，故不需要此cookie,但获取成绩就需要这个Cookie了．<br><a href="https://github.com/asynccnu/login_service/issues/1" target="_blank" rel="external">学长给的获取cookie的示例</a>因为需要Python3中的async，而之前monitor的代码都是基于Python2的，故不可以直接用，需要从新写一个Python2版本的．<br>按照学长给的示例，需要3次Session的请求．<br>在三次请求之后才可以得到有正确Cookie的session.</p><p>我的代码如下（最后还是有问题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</div><div class="line"></div><div class="line">info_login_url = <span class="string">"http://portal.ccnu.edu.cn/loginAction.do"</span></div><div class="line">link_url = <span class="string">"http://portal.ccnu.edu.cn/roamingAction.do?appId=XK"</span></div><div class="line">login_ticket_url = <span class="string">"http://122.204.187.6/xtgl/login_tickitLogin.html"</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36"</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">post_data = &#123;</div><div class="line">    <span class="string">'userName'</span>: <span class="number">2016210942</span>, </div><div class="line">    <span class="string">'userPass'</span>: <span class="number">130395</span></div><div class="line">&#125;  <span class="comment">#将URL与header定义好</span></div><div class="line"></div><div class="line">s = requests.Session()<span class="comment">#使用　requests 的　session类</span></div><div class="line">r = s.post(info_login_url,data = post_data,header=header)　 <span class="comment">#发送第一次请求</span></div><div class="line"><span class="keyword">if</span> r.text.split(<span class="string">'"'</span>)[<span class="number">1</span>] == <span class="string">'index_jg.jsp'</span>:<span class="comment">#判断是否登录成功</span></div><div class="line">    r_second = s.get(link_url,timeout = <span class="number">4</span>)<span class="comment">#第二次</span></div><div class="line">    r_third = s.get(login_ticket_url,timeout = <span class="number">4</span>)<span class="comment">#第三次</span></div><div class="line">    ret = s.__dict__<span class="comment">#获得s对象的所有属性</span></div><div class="line">    pprint(ret)   <span class="comment">#在这里可以用pprint 打印出来．pprint可以将字典等类型比较清晰地打印出来．</span></div><div class="line"><span class="comment">#然后会比较容易发现s对象有一个叫做 cookies 的键.</span></div><div class="line">    cookies = ret[<span class="string">'cookies'</span>]   <span class="comment">#在这里可以type(cookies) ,发现其为&lt;class　'requests.cookies.RequestsCookieJar'&gt; </span></div><div class="line"><span class="comment">#这时我们就可以看一下requests关于cookie的文档</span></div><div class="line"><span class="comment">#找到这个类,发现虽然它就像一个字典一样</span></div><div class="line"><span class="comment">#打印它的key,value,就可以比较容易发现我们需要的数据了</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> cookies.iteritems():</div><div class="line">        <span class="keyword">print</span> key,value</div><div class="line"> </div><div class="line"></div><div class="line">jwcinfo = cookies[<span class="string">'BIGipServerpool_jwc_xk'</span>]</div><div class="line">jsessionid = cookies.values()[<span class="number">1</span>]<span class="comment">#获取cookies</span></div><div class="line"></div><div class="line">login_info_header = &#123;</div><div class="line">    <span class="string">'Bigipserverpool_Jwc_xk'</span>:jwcinfo,</div><div class="line">    <span class="string">'Sid'</span>:<span class="string">'2016210942'</span>,</div><div class="line">    <span class="string">'Jsessionid'</span>:jsessionid,</div><div class="line">    <span class="string">'Authorization'</span>:<span class="string">"Basic Base64(2016210942:130395)"</span></div><div class="line">    &#125;<span class="comment">#但是用这一个header得到的状态码还是502...不知道那里错了...</span></div></pre></td></tr></table></figure><hr><ul><li><p>直接print ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'cookies'</span>: &lt;RequestsCookieJar[Cookie(version=<span class="number">0</span>, name=<span class="string">'BIGipServerpool_jwc_xk'</span>, value=<span class="string">'1028696256.20480.0000'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'122.204.187.6'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'JSESSIONID'</span>, value=<span class="string">'320CA9B505D70D76A12D3D826BB6F20E'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'122.204.187.6'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'BIGipServerpool_portal'</span>, value=<span class="string">'173058240.20480.0000'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'portal.ccnu.edu.cn'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'JSESSIONID'</span>, value=<span class="string">'aaa5uKro_uGjW6WSg0MWv'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'portal.ccnu.edu.cn'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>)]&gt;, <span class="string">'stream'</span>: <span class="keyword">False</span>, <span class="string">'hooks'</span>: &#123;<span class="string">'response'</span>: []&#125;, <span class="string">'redirect_cache'</span>: &lt;requests.packages.urllib3._collections.RecentlyUsedContainer object at <span class="number">0x7fb36c78de50</span>&gt;, <span class="string">'auth'</span>: <span class="keyword">None</span>, <span class="string">'trust_env'</span>: <span class="keyword">True</span>, <span class="string">'headers'</span>: &#123;<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/2.13.0'</span>&#125;, <span class="string">'cert'</span>: <span class="keyword">None</span>, <span class="string">'params'</span>: &#123;&#125;, <span class="string">'verify'</span>: <span class="keyword">True</span>, <span class="string">'proxies'</span>: &#123;&#125;, <span class="string">'adapters'</span>: OrderedDict([(<span class="string">'https://'</span>, &lt;requests.adapters.HTTPAdapter object at <span class="number">0x7fb36ca53790</span>&gt;), (<span class="string">'http://'</span>, &lt;requests.adapters.HTTPAdapter object at <span class="number">0x7fb36ca53b90</span>&gt;)]), <span class="string">'max_redirects'</span>: <span class="number">30</span>&#125;</div></pre></td></tr></table></figure></li><li><p>pprint ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'adapters'</span>: OrderedDict([(<span class="string">'https://'</span>, &lt;requests.adapters.HTTPAdapter object at <span class="number">0x7fb36ca53790</span>&gt;), (<span class="string">'http://'</span>, &lt;requests.adapters.HTTPAdapter object at <span class="number">0x7fb36ca53b90</span>&gt;)]),</div><div class="line"> <span class="string">'auth'</span>: <span class="keyword">None</span>,</div><div class="line"> <span class="string">'cert'</span>: <span class="keyword">None</span>,</div><div class="line"> <span class="string">'cookies'</span>: &lt;RequestsCookieJar[Cookie(version=<span class="number">0</span>, name=<span class="string">'BIGipServerpool_jwc_xk'</span>, value=<span class="string">'1028696256.20480.0000'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'122.204.187.6'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'JSESSIONID'</span>, value=<span class="string">'320CA9B505D70D76A12D3D826BB6F20E'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'122.204.187.6'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'BIGipServerpool_portal'</span>, value=<span class="string">'173058240.20480.0000'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'portal.ccnu.edu.cn'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>), Cookie(version=<span class="number">0</span>, name=<span class="string">'JSESSIONID'</span>, value=<span class="string">'aaa5uKro_uGjW6WSg0MWv'</span>, port=<span class="keyword">None</span>, port_specified=<span class="keyword">False</span>, domain=<span class="string">'portal.ccnu.edu.cn'</span>, domain_specified=<span class="keyword">False</span>, domain_initial_dot=<span class="keyword">False</span>, path=<span class="string">'/'</span>, path_specified=<span class="keyword">True</span>, secure=<span class="keyword">False</span>, expires=<span class="keyword">None</span>, discard=<span class="keyword">True</span>, comment=<span class="keyword">None</span>, comment_url=<span class="keyword">None</span>, rest=&#123;&#125;, rfc2109=<span class="keyword">False</span>)]&gt;,</div><div class="line"> <span class="string">'headers'</span>: &#123;<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/2.13.0'</span>&#125;,</div><div class="line"> <span class="string">'hooks'</span>: &#123;<span class="string">'response'</span>: []&#125;,</div><div class="line"> <span class="string">'max_redirects'</span>: <span class="number">30</span>,</div><div class="line"> <span class="string">'params'</span>: &#123;&#125;,</div><div class="line"> <span class="string">'proxies'</span>: &#123;&#125;,</div><div class="line"> <span class="string">'redirect_cache'</span>: &lt;requests.packages.urllib3._collections.RecentlyUsedContainer object at <span class="number">0x7fb36c78de50</span>&gt;,</div><div class="line"> <span class="string">'stream'</span>: <span class="keyword">False</span>,</div><div class="line"> <span class="string">'trust_env'</span>: <span class="keyword">True</span>,</div><div class="line"> <span class="string">'verify'</span>: <span class="keyword">True</span>&#125;</div></pre></td></tr></table></figure></li></ul><hr><p><a href="http://docs.python-requests.org/en/master/api/#requests.cookies.RequestsCookieJar" target="_blank" rel="external">requests关于cookie的文档</a></p><hr><p>打印<code>&lt;class　&#39;requests.cookies.RequestsCookieJar&#39;&gt;</code>的key,value:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BIGipServerpool_jwc_xk 1028696256.20480.0000</div><div class="line">JSESSIONID 320CA9B505D70D76A12D3D826BB6F20E</div><div class="line">BIGipServerpool_portal 173058240.20480.0000</div><div class="line">JSESSIONID aaa5uKro_uGjW6WSg0MWv</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取信息门户的Cookie时，我们需要动态的获取，以得到正确的Cookie.&lt;br&gt;因为原来华师匣子课表等有数据库，故不需要此cookie,但获取成绩就需要这个Cookie了．&lt;br&gt;&lt;a href=&quot;https://github.com/asynccnu/login_se
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flask下解析requests返回的json数据</title>
    <link href="http://Humbertzhang.github.io/2017/05/15/Flask%E4%B8%8B%E8%A7%A3%E6%9E%90requests%E8%BF%94%E5%9B%9E%E7%9A%84json%E6%95%B0%E6%8D%AE/"/>
    <id>http://Humbertzhang.github.io/2017/05/15/Flask下解析requests返回的json数据/</id>
    <published>2017-05-15T13:20:11.000Z</published>
    <updated>2017-12-11T12:14:54.069Z</updated>
    
    <content type="html"><![CDATA[<p>今天在完善ccnubox_monitor时发现需要利用返回的数据．所以学了一下Python里怎么解析json数据.</p><p>因为需要先添加一节课，然后拿到这节课的id，之后用在删除这节课的api中，所以我们就需要先拿到添加这节课时返回的json数据里面的id.</p><p>具体代码如下(一些密码之类的删去了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</div><div class="line"></div><div class="line">login_header = &#123;<span class="string">'login'</span>:<span class="string">'header'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">#添加课程</span></div><div class="line">post_data=&#123;</div><div class="line">            <span class="string">"course"</span>:<span class="string">"test"</span>,</div><div class="line">            <span class="string">"teacher"</span>:<span class="string">"test"</span>,</div><div class="line">            <span class="string">"weeks"</span>:<span class="string">"1,2,3,4"</span>,</div><div class="line">            <span class="string">"day"</span>:<span class="string">"星期1"</span>,</div><div class="line">            <span class="string">"start"</span>:<span class="string">"1"</span>,</div><div class="line">            <span class="string">"during"</span>:<span class="string">"1"</span>,</div><div class="line">            <span class="string">"place"</span>:<span class="string">"9-11"</span>,</div><div class="line">            <span class="string">"remind"</span>:<span class="keyword">False</span></div><div class="line">    &#125;</div><div class="line">resp07=requests.post(<span class="string">"https://ccnubox.addclass.url"</span>,</div><div class="line">                            json = post_data,</div><div class="line">                            headers = login_header)</div><div class="line">statu07 = resp07.status_code</div><div class="line"><span class="comment">#print resp07.text</span></div><div class="line"><span class="comment">#print type(resp07.text)</span></div><div class="line"></div><div class="line">json_data = resp07.json()</div><div class="line"><span class="comment">#print json_data</span></div><div class="line"><span class="comment">#print type(json_data)</span></div><div class="line"><span class="keyword">global</span> class_id </div><div class="line">class_id = json_data[<span class="string">"id"</span>]</div><div class="line"><span class="comment">#print class_id</span></div><div class="line"></div><div class="line"><span class="comment">#删除课程 ID 为课程ID</span></div><div class="line"></div><div class="line">resp09 = requests.delete(<span class="string">"https://ccnubox.deleteclass.url/"</span>+str(class_id)+<span class="string">"/"</span>,</div><div class="line">                                headers = login_info_header )</div><div class="line">statu09=resp09.status_code</div><div class="line"><span class="keyword">print</span> statu09</div></pre></td></tr></table></figure><p>首先，利用requests的post方法发送一个添加课程的请求.<br>这时候我们print 一下他的text,发现是<br><code>{&quot;id&quot;: 814}</code><br>然后print 一下他的type(resp07.text),发现是<br><code>&lt;type &#39;unicode&#39;&gt;</code><br>上网查阅之后，得知利用 <code>requests</code> 所得到的response是Response类，他有一个方法是 <code>json</code><br>所以，我们让 <code>json_data = resp.json()</code> .<br>此时我以为resp.json()得到的还是json类型，然后想把它转化成python中的dict类型.但是怎么都弄不好，后来type(resp.json())发现返回的是：<br><code>&lt;type &#39;dict&#39;&gt;</code><br>也就是说，resp.json()就直接将json数据变成了dict类型，所以我们此时就可以直接用键值对来拿里面的东西了：<code>class_id = json_data[&quot;id&quot;]</code> .<br>所以我们就可以在删除里面用class_id了：<code>str(class_id)</code><br>大概就是这样．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在完善ccnubox_monitor时发现需要利用返回的数据．所以学了一下Python里怎么解析json数据.&lt;/p&gt;
&lt;p&gt;因为需要先添加一节课，然后拿到这节课的id，之后用在删除这节课的api中，所以我们就需要先拿到添加这节课时返回的json数据里面的id.&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Flask" scheme="http://Humbertzhang.github.io/tags/Flask/"/>
    
      <category term="Python" scheme="http://Humbertzhang.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu上shadowsocks+chrome翻墙指南</title>
    <link href="http://Humbertzhang.github.io/2017/05/08/Ubuntu%E4%B8%8Ashadowsocks-chrome%E7%BF%BB%E5%A2%99%E6%8C%87%E5%8D%97/"/>
    <id>http://Humbertzhang.github.io/2017/05/08/Ubuntu上shadowsocks-chrome翻墙指南/</id>
    <published>2017-05-08T15:29:58.000Z</published>
    <updated>2017-12-21T08:49:55.305Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#安装shadowsocks终端版">安装shadowsocks（终端版）</a></li><li><a href="#配置chrome浏览器">配置Chrome浏览器</a></li><li><a href="#翻墙的日常">翻墙的日常</a></li></ul><!-- tocstop --><h3><span id="安装shadowsocks终端版">安装shadowsocks（终端版）</span></h3><p>终端内输入</p><pre><code>apt-get updateapt-get install python-pippip install shadowsocks</code></pre><h3><span id="配置chrome浏览器">配置Chrome浏览器</span></h3><p><a href="https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList" target="_blank" rel="external">SwitchyOmega</a></p><ul><li><p>按照指示通过github上安装switchyOmega，导入备份．</p></li><li><p>设置代理服务器时，我的设置好了的GFWed截图为<img src="http://chuantu.biz/t5/81/1494258297x2890174297.png" alt="截图"></p></li><li><p>之后再跟着SwitchyOmega上操作即可</p></li></ul><h3><span id="翻墙的日常">翻墙的日常</span></h3><p>之后，在终端里面输入以下内容：<br>sslocal -s 服务器ip -p 服务器端口 -l 1080 -k “密码”<br>如: </p><pre><code>sslocal -s 111.111.111.111 -p 6379 -l 1080 -k &quot;keyword&quot;</code></pre><p>即可翻墙．<br>如果嫌麻烦可以写个简单的脚本:<br><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell脚本编程30分钟入门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装shadowsocks终端版&quot;&gt;安装shadowsocks（终端版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#配置chrome浏览器&quot;&gt;配置Chrome浏览器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://Humbertzhang.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker部署ceph/demo</title>
    <link href="http://Humbertzhang.github.io/2017/05/06/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2ceph-demo/"/>
    <id>http://Humbertzhang.github.io/2017/05/06/使用Docker部署ceph-demo/</id>
    <published>2017-05-06T14:50:44.000Z</published>
    <updated>2017-12-11T12:13:36.429Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Ubuntu 16.04</p><h2><span id="安装docker">安装Docker</span></h2><pre><code>curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</code></pre><h2><span id="使用阿里云镜像加速器">使用阿里云镜像加速器</span></h2><p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="external">阿里云镜像加速器</a><br>按照指导修改文件</p><h2><span id="得到自己的ip与cdir">得到自己的IP与CDIR</span></h2><pre><code>ip -4 a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    inet 10.135.186.15/18 brd 10.135.191.255 scope global eth0       valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default     inet 172.17.0.1/16 scope global docker0       valid_lft forever preferred_lft forever</code></pre><p>2中的10.135.186.15即为ip，10.135.186.15/18为对应CDIR</p><h2><span id="下载镜像">下载镜像</span></h2><p>运行：</p><pre><code>sudo docker run -d --net=host -v /etc/ceph:/etc/ceph -e MON_IP=10.135.186.15 -e CEPH_PUBLIC_NETWORK=10.135.186.15/18 ceph/demo d3e4ead6c0ba4606201f9f861bd960f4c6d9376d6686714664489540b2843ce0</code></pre><p>下载ceph/demo</p><h2><span id="针对ext4修改配置">针对ext4修改配置</span></h2><p>官方不建议采用ext4文件系统作为ceph的后端文件系统，如果采用，那么对于ext4的filesystem，应该在/etc/ceph/ceph.conf中添加如下配置：</p><pre><code>osd max object name len = 256osd max object namespace len = 64</code></pre><h2><span id="部署ceph">部署ceph</span></h2><p>仍然运行</p><pre><code>sudo docker run -d --net=host -v /etc/ceph:/etc/ceph -e MON_IP=10.135.186.15 -e CEPH_PUBLIC_NETWORK=10.135.186.15/21 ceph/demo d3e4ead6c0ba4606201f9f861bd960f4c6d9376d6686714664489540b2843ce0</code></pre><hr><p>参考:</p><ul><li><a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html" target="_blank" rel="external">Docker从入门到实践－镜像加速器</a></li><li><a href="https://www.sebastien-han.fr/blog/2015/08/24/ceph-cluster-on-docker-for-testing/" target="_blank" rel="external">Ceph cluster on Docker for testing</a></li><li><a href="https://hub.docker.com/r/ceph/demo/" target="_blank" rel="external">ceph/demo Docker Hub地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：Ubuntu 16.04&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;安装docker&quot;&gt;安装Docker&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.co
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://Humbertzhang.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python核心编程四、五</title>
    <link href="http://Humbertzhang.github.io/2017/04/06/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://Humbertzhang.github.io/2017/04/06/Python核心编程第四章/</id>
    <published>2017-04-06T15:35:04.000Z</published>
    <updated>2017-12-21T08:49:45.455Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#切片">切片</a></li><li><a href="#is-和">“is” 和 “==”</a></li><li><a href="#可变类型与不可变类型">可变类型与不可变类型</a></li><li><a href="#除法">除法</a></li><li><a href="#random">Random</a></li></ul><!-- tocstop --><hr><h3><span id="切片">切片</span></h3><p>string[start:end:steps]  OR string[start:end]<br>如：</p><pre><code>&gt;&gt;&gt; str&apos;abcdefghijklmn&apos;&gt;&gt;&gt; str[0:3]&apos;abc&apos;&gt;&gt;&gt; str[1:9:3]&apos;beh&apos;</code></pre><hr><h3><span id="is-和">“is” 和 “==”</span></h3><p>“is” 比较的是两个对象的id<br>“==” 比较的是两个对象的值<br>且在Python中[-256,256]范围内的<code>整数</code>，无论谁等于他们，id 都一样<br>因为在Python中令变量等于[-256,256]范围内的值只会用他们引用那些数<br>ps:对象的三个属性，id,type,value</p><pre><code>&gt;&gt;&gt; a = 256&gt;&gt;&gt; b = 256&gt;&gt;&gt; c = 256.0&gt;&gt;&gt; d = 256.0&gt;&gt;&gt; e = 257&gt;&gt;&gt; f = 257&gt;&gt;&gt; a == bTrue&gt;&gt;&gt; c == dTrue&gt;&gt;&gt; e == fTrue&gt;&gt;&gt; a is bTrue&gt;&gt;&gt; c is dFalse&gt;&gt;&gt; e is fFalse</code></pre><hr><h3><span id="可变类型与不可变类型">可变类型与不可变类型</span></h3><p>可变类型：列表 字典<br>不可变类型：数字 字符串 元组<br>这些不可变类型在改变他们的值时ID便会改变<br>而可变类型在改变时则不会</p><hr><h3><span id="除法">除法</span></h3><pre><code>&gt;&gt;&gt; 1/2         #普通除法0&gt;&gt;&gt; 1.0/2.00.5&gt;&gt;&gt; from __future__ import division&gt;&gt;&gt; 1/20.5&gt;&gt;&gt; 1//20&gt;&gt;&gt; 1.0//2.00.0&gt;&gt;&gt; -1//2-1</code></pre><hr><h3><span id="random">Random</span></h3><p>random.randrange(start,end) :返回(start,end)内的整数，即不包括两端<br>random.randint(start,end):随机返回[start,end]内的整数<br>random.uniform(start,end)：随机返回[strat,end]内的浮点数<br>random.choice(sequence)：随机返回sequence内的一个元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#切片&quot;&gt;切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#is-和&quot;&gt;“is” 和 “==”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#可变类型与不可变类型&quot;&gt;可变类型与不可变类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URL状态监控</title>
    <link href="http://Humbertzhang.github.io/2017/03/25/URL%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>http://Humbertzhang.github.io/2017/03/25/URL状态监控/</id>
    <published>2017-03-25T04:53:00.000Z</published>
    <updated>2017-12-21T08:50:03.495Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><!-- tocstop --><hr><pre><code>要做什么    </code></pre><p>1,向指定URL发送请求：   requests<br>2,将状态码保存在redis数据库中 ： redis<br>3,定时启动  ：   celerybeat<br>4,返回给前端，以便生成图表：  flask<br>5,注意有时需要附加头部信息：  HTTPAuthBasic<br>6,一次性返回最近24小时数据  </p><hr><p>程序结构：<br>    demo<br>    ├── celerybeat.pid<br>    ├── celerybeat-schedule<br>    ├── demo2.py<br>    ├── make_celery.py<br>    └── monitor.py</p><hr><blockquote><p>make_celery.py   #用于帮助配置 monitor 中的 celery</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_celery</span><span class="params">(app)</span>:</span></div><div class="line">    celery = Celery(app.import_name,broker=app.config[<span class="string">'CELERY_BROKER_URL'</span>])</div><div class="line">    celery.conf.update(app.config)</div><div class="line">    TaskBase = celery.Task</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ContextTask</span><span class="params">(TaskBase)</span>:</span></div><div class="line">        abstract = <span class="keyword">True</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">            <span class="keyword">with</span> app.app_context():</div><div class="line">                <span class="keyword">return</span> TaskBase.__call__(self,*args,**kwargs)</div><div class="line">    celery.Task = ContextTask</div><div class="line">    <span class="keyword">return</span> celery</div></pre></td></tr></table></figure><hr><blockquote><p>monitor.py #监控程序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> redis</div><div class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</div><div class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify</div><div class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> sys,path</div><div class="line"><span class="keyword">from</span> make_celery <span class="keyword">import</span> make_celery</div><div class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager </div><div class="line"></div><div class="line"><span class="comment">#每次检查间隔时间</span></div><div class="line">TIME_EVERY_CHECK=<span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">#连接redis</span></div><div class="line">pool = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>)</div><div class="line">r = redis.StrictRedis(connection_pool=pool)</div><div class="line"></div><div class="line"><span class="comment">#图书馆头部信息</span></div><div class="line">Passlib =<span class="string">"2016000000:123456"</span></div><div class="line">b64Vallib = base64.b64encode(Passlib)</div><div class="line"></div><div class="line"><span class="comment">#初始化APP</span></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">url01=<span class="string">"https://taobao.com"</span></div><div class="line">url02=<span class="string">"https://ccnubox.muxixyz.com/api/lib/login/"</span></div><div class="line"></div><div class="line"><span class="comment">#配置</span></div><div class="line">app.config.update(</div><div class="line">    </div><div class="line">    CELERY_BROKER_URL=<span class="string">'redis://127.0.0.1:6379'</span>,</div><div class="line">    CELERY_RESULT_BACKEND=<span class="string">'redis://127.0.0.1:6379/0'</span>,    </div><div class="line">    <span class="comment">#Timezone</span></div><div class="line">    CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span>,</div><div class="line"></div><div class="line">    <span class="comment">#schedules</span></div><div class="line"></div><div class="line">    CELERYBEAT_SCHEDULE = &#123;</div><div class="line">        <span class="string">'request_taobao'</span>:&#123;</div><div class="line">            <span class="string">'task'</span>: <span class="string">'login_xinximenhu'</span>,</div><div class="line">            <span class="string">'schedule'</span>: timedelta(seconds = TIME_EVERY_CHECK),</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'login_library'</span>:&#123;</div><div class="line">            <span class="string">'task'</span>:<span class="string">'login_lib'</span>,</div><div class="line">            <span class="string">'schedule'</span>:timedelta(seconds = TIME_EVERY_CHECK),</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    celery = make_celery(app)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#访问淘宝</span></div><div class="line"><span class="meta">@celery.task(name='request_taobao')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_taobao</span><span class="params">()</span>:</span></div><div class="line">    resp01 = requests.get(url01)</div><div class="line">    statu01 = resp01.status_code</div><div class="line">    r.set(url01,statu01)</div><div class="line"></div><div class="line"><span class="comment">#登录CCNU图书馆 </span></div><div class="line"><span class="meta">@celery.task(name='login_lib')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_lib</span><span class="params">()</span>:</span></div><div class="line">    resp02= requests.get(url02,headers = &#123;<span class="string">"Authorization"</span>: <span class="string">"Basic %s"</span> %b64Vallib&#125;)</div><div class="line">    statu02 = resp02.status_code</div><div class="line">    r.set(url02,statu02)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> jsonify(&#123;</div><div class="line">            url01:r.get(url01),</div><div class="line">            url02:r.get(url02)</div><div class="line">           &#125;)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</div><div class="line">    app.run(debug=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p><p>demo2.py       #一次返回最近XXX时间内的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">#coding:utf-8   </div><div class="line"></div><div class="line">from __future__ import absolute_import</div><div class="line">import requests</div><div class="line">import base64</div><div class="line">import redis</div><div class="line">from requests.auth import HTTPBasicAuth</div><div class="line">from celery import Celery</div><div class="line">from flask import Flask,jsonify</div><div class="line">from celery.schedules import crontab</div><div class="line">from datetime import timedelta</div><div class="line">from os import sys,path</div><div class="line">from make_celery import make_celery</div><div class="line">from flask_script import Manager </div><div class="line"></div><div class="line">#每次检查间隔时间</div><div class="line">TIME_EVERY_CHECK=3</div><div class="line"></div><div class="line">#Control loop arg</div><div class="line">i = 0</div><div class="line"></div><div class="line">#返回数据的总数</div><div class="line">TOTAL = 20</div><div class="line"></div><div class="line">#redis链接池</div><div class="line">pool01 = redis.ConnectionPool(host=&apos;127.0.0.1&apos;, port=6379, db=1)</div><div class="line">pool02 = redis.ConnectionPool(host=&apos;127.0.0.1&apos;, port=6379, db=2)</div><div class="line">r01 = redis.StrictRedis(connection_pool=pool01)</div><div class="line">r02 = redis.StrictRedis(connection_pool=pool02)</div><div class="line"></div><div class="line">#图书馆头部信息</div><div class="line">Passlib =&quot;2016210942:123456&quot;</div><div class="line">b64Vallib = base64.b64encode(Passlib)</div><div class="line"></div><div class="line">#初始化APP</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">url01=&quot;https://taobao.com&quot;</div><div class="line">url02=&quot;https://ccnubox.muxixyz.com/api/lib/login/&quot;</div><div class="line"></div><div class="line">#配置</div><div class="line">app.config.update(</div><div class="line">    </div><div class="line">    CELERY_BROKER_URL=&apos;redis://127.0.0.1:6379&apos;,</div><div class="line">    CELERY_RESULT_BACKEND=&apos;redis://127.0.0.1:6379/0&apos;,    </div><div class="line">    #Timezone</div><div class="line">    CELERY_TIMEZONE = &apos;Asia/Shanghai&apos;,</div><div class="line"></div><div class="line">    #schedules</div><div class="line"></div><div class="line">    CELERYBEAT_SCHEDULE = &#123;</div><div class="line">        &apos;product&apos;:&#123;</div><div class="line">            &apos;task&apos;: &apos;product&apos;,</div><div class="line">            &apos;schedule&apos;: timedelta(seconds = TIME_EVERY_CHECK),</div><div class="line">        &#125;,</div><div class="line">        &apos;login_library&apos;:&#123;</div><div class="line">            &apos;task&apos;:&apos;login_lib&apos;,</div><div class="line">            &apos;schedule&apos;:timedelta(seconds = TIME_EVERY_CHECK),</div><div class="line">        &#125;,</div><div class="line">        &apos;controli&apos;:&#123;</div><div class="line">            &apos;task&apos;:&apos;controli&apos;,</div><div class="line">            &apos;schedule&apos;:timedelta(seconds = TIME_EVERY_CHECK),</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">app.config[&apos;JSON_AS_ASCII&apos;] = False</div><div class="line"></div><div class="line">celery = make_celery(app) </div><div class="line"></div><div class="line">#木犀产品展示</div><div class="line">@celery.task(name=&apos;product&apos;)</div><div class="line">def product():</div><div class="line">    resp01 = requests.get(url01)</div><div class="line">    statu01 = resp01.status_code</div><div class="line">    r01.set(i,statu01)</div><div class="line"></div><div class="line">#登录CCNU图书馆 </div><div class="line">@celery.task(name=&apos;login_lib&apos;)</div><div class="line">def login_lib():</div><div class="line">    resp02= requests.get(url02,headers = &#123;&quot;Authorization&quot;: &quot;Basic %s&quot; %b64Vallib&#125;)</div><div class="line">    statu02 = resp02.status_code</div><div class="line">    r02.set(i,statu02)</div><div class="line"></div><div class="line">@celery.task(name=&apos;controli&apos;)</div><div class="line">def controli():</div><div class="line">    global i</div><div class="line">    if i &lt; TOTAL-1:</div><div class="line">        i = i+1</div><div class="line">    elif i == TOTAL-1:</div><div class="line">        i = 0</div><div class="line">@app.route(&quot;/&quot;)</div><div class="line">def index():</div><div class="line">    return jsonify(&#123;</div><div class="line">        &quot;木犀产品展示&quot;:[r01.get(k) for k in range(TOTAL)],</div><div class="line">        &quot;登录图书馆&quot;:[r02.get(k) for k in range(TOTAL)]</div><div class="line">    &#125;)</div><div class="line">if __name__ ==&apos;__main__&apos;:</div><div class="line">    app.run(debug=True)</div></pre></td></tr></table></figure></p></blockquote><hr><p>程序运行步骤</p><blockquote><p>1,flask project: python monitor.py runserver<br>2,redis: redis-server<br>3,celery(main process): celery worker - -app monitor.celery - -loglevel=info<br>4,celery(beat): celery beat - -app monitor.celery - -loglevel=info</p><hr><p>运行效果<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://postimg.org/image/m5bjymmin/" alt="效果图.png](https://s11.postimg.org/ozepc2ooz/image.png)" title="">                </div>                <div class="image-caption">效果图.png](https://s11.postimg.org/ozepc2ooz/image.png)</div>            </figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;要做什么    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1,向指定URL发送请求：   requests&lt;br&gt;2,将状态码保存在redis数据库中 ： redis&lt;br&gt;3,定时启动  ：  
      
    
    </summary>
    
    
      <category term="Flask" scheme="http://Humbertzhang.github.io/tags/Flask/"/>
    
      <category term="Python" scheme="http://Humbertzhang.github.io/tags/Python/"/>
    
      <category term="Celery" scheme="http://Humbertzhang.github.io/tags/Celery/"/>
    
  </entry>
  
</feed>
